@page "/login"

@using Microsoft.Extensions.DependencyInjection
@inject IServiceScopeFactory ScopeFactory
@inject NavigationManager Navigation
@inject IStringLocalizer<Login> localizer

@using LCG.Template.Common.Models.Account
@using LCG.Template.Common.Enums.Auth
@using Microsoft.AspNetCore.Authorization

<BodyElement CssClass="app-login"></BodyElement>
<BodyElement CssClass="p-0"></BodyElement>

<div class="row g-0 app-auth-wrapper">
    <div class="col-12 col-md-7 col-lg-6 auth-main-col text-center p-5">
        <div class="d-flex flex-column align-content-end">
            <div class="app-auth-body mx-auto">
                <div class="app-auth-branding mb-4">
                    <a class="app-logo" href="/">
                        <img class="logo-icon mr-2" src="assets/images/app-logo.svg" alt="logo">
                    </a>
                </div>
                <h2 class="auth-heading text-center mb-5">@localizer["Title"]</h2>
                <div class="auth-form-container text-left">
                    <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="auth-form login-form">
                        <DataAnnotationsValidator />

                        <div class="email mb-3">
                            <label class="sr-only" for="login-email">Email</label>
                            <InputText id="login-email" class="form-control signin-email" @bind-Value="loginModel.Username" placeholder="Email address" />
                            <ValidationMessage For="() => loginModel.Username" />
                        </div>
                        <div class="password mb-3">
                            <label class="sr-only" for="login-password">Password</label>
                            <InputText id="login-password" class="form-control signin-password" @bind-Value="loginModel.Password" placeholder="Password" />
                            <ValidationMessage For="() => loginModel.Password" />
                            <div class="extra mt-3 row justify-content-between">
                                <div class="col-6">
                                    <div class="form-check">
                                        <InputCheckbox Id="login-remember-password" Class="form-check-input" @bind-Value="loginModel.RememberMe" />
                                        <label class="form-check-label" for="login-remember-password">
                                            Remember me
                                        </label>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="forgot-password text-right">
                                        <a href="/reset-password">Forgot password?</a>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn app-btn-primary btn-block theme-btn mx-auto">Log In</button>
                        </div>
                    </EditForm>
                </div>
            </div>

            <footer class="app-auth-footer">
                <div class="container text-center py-3">
                    <small class="copyright">Designed with <i class="fas fa-heart" style="color: #fb866a;"></i> by <a class="app-link" href="https://lcg.consulting/" target="_blank">LCG Consulting</a> for developers</small>
                </div>
            </footer>
        </div>
    </div>

    <div class="col-12 col-md-5 col-lg-6 h-100 auth-background-col">
        <div class="auth-background-holder">
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool ShowErrors;
    private string Error = "";


    private async Task HandleLogin()
    {
        ShowErrors = false;

        using (var serviceScope = ScopeFactory.CreateScope())
        {
            var myService = serviceScope.ServiceProvider.GetService<ISessionService>();
            var loginStatus = await myService.LoginAndSetSessionInfoAsync(loginModel);
        }

        //var loginStatus = await ForecastService.Cenas(loginModel);

        //var loginStatus = await SessionService.LoginAndSetSessionInfoAsync(loginModel);

        //if (loginStatus == LoginStatus.Success && !string.IsNullOrEmpty(loginModel.ReturnUrl))
        //{
        //    Navigation.NavigateTo(loginModel.ReturnUrl);
        //}
        //else if (loginStatus == LoginStatus.Success)
        //{
        //    Navigation.NavigateTo("/");
        //}
        //else if (loginStatus == LoginStatus.PickAccount)
        //{
        //    Navigation.NavigateTo("pickaccount");
        //}

        //Error = result.Error;
        ShowErrors = true;
    }
}